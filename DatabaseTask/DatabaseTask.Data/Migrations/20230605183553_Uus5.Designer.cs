// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20230605183553_Uus5")]
    partial class Uus5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DatabaseTask.Core.Domain.Ametinimetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KasutuselAlates")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("KasutuselKuni")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ametinimetus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsikId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kontonumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LepinguNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TulumaksuvabaSumma")
                        .HasColumnType("int");

                    b.Property<string>("TööEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TööTelefon")
                        .HasColumnType("int");

                    b.Property<bool>("TöösuheKehtiv")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TöösuhteAlgus")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TöösuhteLõpp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TöötajaNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsikId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Firma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aadress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KontaktEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kontakttelefon")
                        .HasColumnType("int");

                    b.Property<string>("Nimi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegKood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RiikId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiikId");

                    b.ToTable("Firma");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Haigusleht", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Esmane_Järgenev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HaigestumiseAlgus")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HaigestumiseLõpp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Liik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Haigusleht");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Harukontor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aadress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirmaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KontaktEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kontakttelefon")
                        .HasColumnType("int");

                    b.Property<string>("Nimi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegKood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirmaId");

                    b.ToTable("Harukontor");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Isik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Eesnimi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Isikukood")
                        .HasColumnType("int");

                    b.Property<string>("KontaktAadress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KontaktTelefon")
                        .HasColumnType("int");

                    b.Property<string>("Perekonnanimi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sugu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Sünniaeg")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Isik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Koolitus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AlgusKp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KoolituseAndmed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LõppKp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Koolitus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.LaenutatavEse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AsjaKood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HarukontorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LaenutusesAlates")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LaenutusesKuni")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HarukontorId");

                    b.ToTable("LaenutatavEse");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Laenutus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaenutatavEseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LaenutuseAlgus")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LaenutuseLõpp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LaenutatavEseId");

                    b.ToTable("Laenutus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Ligipääsuliik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Alguskuupäev")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Lõppkuupäev")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ligipääsuliik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Osakond", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aktiivne")
                        .HasColumnType("bit");

                    b.Property<Guid>("HarukontorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HarukontorId");

                    b.ToTable("Osakond");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Osakonnajuht", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JuhtAlates")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JuhtKuni")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OsakondId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OsakondId");

                    b.ToTable("Osakonnajuht");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.OsakonnaTöötaja", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OsakondId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TöötabAlates")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TöötabKuni")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OsakondId");

                    b.ToTable("OsakonnaTöötaja");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.PalgaarvestuseRead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HaiguslehtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PalgaarvestuseSumma")
                        .HasColumnType("int");

                    b.Property<Guid?>("PalkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PuhkusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TööajakavaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VäljamakseliikId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HaiguslehtId");

                    b.HasIndex("PalkId");

                    b.HasIndex("PuhkusId");

                    b.HasIndex("TööajakavaId");

                    b.HasIndex("VäljamakseliikId");

                    b.ToTable("PalgaarvestuseRead");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Palk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArvestatudSumma")
                        .HasColumnType("int");

                    b.Property<DateTime>("Arvestuskuu")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("KinnipeetudTm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kontonumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TulumaksuvabaMin")
                        .HasColumnType("int");

                    b.Property<decimal>("Väljamakse")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("VäljamakseKp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Palk");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Puhkus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PuhkuseAlgus")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PuhkuseLõpp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PuhkuseliikId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("VäljamaksePalgaga")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PuhkuseliikId");

                    b.ToTable("Puhkus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Puhkuseliik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LiikKasutuses")
                        .HasColumnType("bit");

                    b.Property<string>("MKommentaar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PuhkusepäevadeArv")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Puhkuseliik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Riik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Riik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tervisekontroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KahjulikudTegurid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meditsiiniasutus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TerviseKontrolliKP")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Tervisekontroll");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tööajakava", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PerioodiAlgus")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PerioodiLõpp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TöölepingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TöötatudTunnid")
                        .HasColumnType("int");

                    b.Property<int>("Valveaeg")
                        .HasColumnType("int");

                    b.Property<int>("Ületunnid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TöölepingId");

                    b.ToTable("Tööajakava");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tööleping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Alguskuupäev")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KoostamiseKp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LepinguLiik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Lõppkuupäev")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Töökoormus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TöölepinguLisaNumber")
                        .HasColumnType("int");

                    b.Property<int>("Töötasu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Tööleping");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaAmetinimetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Alguskuupäev")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AmetinimetusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Lõppkuupäev")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AmetinimetusId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TöötajaAmetinimetus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaLaps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TöötajaLaps");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaLigipääs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KehtivAlates")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("KehtivKuni")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LigipääsuliikId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LigipääsuliikId");

                    b.ToTable("TöötajaLigipääs");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaPalve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Kommentaar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LisamiseAeg")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sisu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TöötajaPalve");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Vihje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirmaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaatmiseAeg")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sisu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirmaId");

                    b.ToTable("Vihje");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Väljamakseliik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LiikKasutuses")
                        .HasColumnType("bit");

                    b.Property<string>("Nimetus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Väljamakseliik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Isik", "Isik")
                        .WithMany("Employees")
                        .HasForeignKey("IsikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Isik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Firma", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Riik", "Riik")
                        .WithMany("Firmas")
                        .HasForeignKey("RiikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Riik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Haigusleht", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Haiguslehts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Harukontor", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Firma", "Firma")
                        .WithMany("Harukontors")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Koolitus", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Koolitus")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.LaenutatavEse", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Harukontor", "Harukontor")
                        .WithMany("LaenutatavEses")
                        .HasForeignKey("HarukontorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Harukontor");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Laenutus", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Laenutus")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.LaenutatavEse", "LaenutatavEse")
                        .WithMany("Laenutus")
                        .HasForeignKey("LaenutatavEseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LaenutatavEse");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Osakond", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Harukontor", "Harukontor")
                        .WithMany("Osakonds")
                        .HasForeignKey("HarukontorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Harukontor");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Osakonnajuht", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Osakonnajuhts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Osakond", "Osakond")
                        .WithMany("Osakonnajuhts")
                        .HasForeignKey("OsakondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Osakond");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.OsakonnaTöötaja", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("OsakonnaTöötajas")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Osakond", "Osakond")
                        .WithMany("OsakonnaTöötajas")
                        .HasForeignKey("OsakondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Osakond");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.PalgaarvestuseRead", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Haigusleht", "Haigusleht")
                        .WithMany("PalgaarvestuseReads")
                        .HasForeignKey("HaiguslehtId");

                    b.HasOne("DatabaseTask.Core.Domain.Palk", "Palk")
                        .WithMany("PalgaarvestuseReads")
                        .HasForeignKey("PalkId");

                    b.HasOne("DatabaseTask.Core.Domain.Puhkus", "Puhkus")
                        .WithMany("PalgaarvestuseReads")
                        .HasForeignKey("PuhkusId");

                    b.HasOne("DatabaseTask.Core.Domain.Tööajakava", "Tööajakava")
                        .WithMany("PalgaarvestuseReads")
                        .HasForeignKey("TööajakavaId");

                    b.HasOne("DatabaseTask.Core.Domain.Väljamakseliik", "Väljamakseliik")
                        .WithMany("PalgaarvestuseReads")
                        .HasForeignKey("VäljamakseliikId");

                    b.Navigation("Haigusleht");

                    b.Navigation("Palk");

                    b.Navigation("Puhkus");

                    b.Navigation("Tööajakava");

                    b.Navigation("Väljamakseliik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Palk", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Palks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Puhkus", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Puhkus")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Puhkuseliik", "Puhkuseliik")
                        .WithMany("Puhkus")
                        .HasForeignKey("PuhkuseliikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Puhkuseliik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tervisekontroll", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Tervisekontrolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tööajakava", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Tööleping", "Tööleping")
                        .WithMany("Tööajakavas")
                        .HasForeignKey("TöölepingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tööleping");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tööleping", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Töölepings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaAmetinimetus", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Ametinimetus", "Ametinimetus")
                        .WithMany("TöötajaAmetinimetus")
                        .HasForeignKey("AmetinimetusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("TöötajaAmetinimetus")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ametinimetus");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaLaps", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("Childrens")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaLigipääs", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("TöötajaLigipääs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.Ligipääsuliik", "Ligipääsuliik")
                        .WithMany("TöötajaLigipääs")
                        .HasForeignKey("LigipääsuliikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Ligipääsuliik");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.TöötajaPalve", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Employee", "Employee")
                        .WithMany("TöötajaPalves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Vihje", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Firma", "Firma")
                        .WithMany("Vihjes")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Ametinimetus", b =>
                {
                    b.Navigation("TöötajaAmetinimetus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Haiguslehts");

                    b.Navigation("Koolitus");

                    b.Navigation("Laenutus");

                    b.Navigation("OsakonnaTöötajas");

                    b.Navigation("Osakonnajuhts");

                    b.Navigation("Palks");

                    b.Navigation("Puhkus");

                    b.Navigation("Tervisekontrolls");

                    b.Navigation("Töölepings");

                    b.Navigation("TöötajaAmetinimetus");

                    b.Navigation("TöötajaLigipääs");

                    b.Navigation("TöötajaPalves");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Firma", b =>
                {
                    b.Navigation("Harukontors");

                    b.Navigation("Vihjes");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Haigusleht", b =>
                {
                    b.Navigation("PalgaarvestuseReads");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Harukontor", b =>
                {
                    b.Navigation("LaenutatavEses");

                    b.Navigation("Osakonds");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Isik", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.LaenutatavEse", b =>
                {
                    b.Navigation("Laenutus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Ligipääsuliik", b =>
                {
                    b.Navigation("TöötajaLigipääs");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Osakond", b =>
                {
                    b.Navigation("OsakonnaTöötajas");

                    b.Navigation("Osakonnajuhts");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Palk", b =>
                {
                    b.Navigation("PalgaarvestuseReads");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Puhkus", b =>
                {
                    b.Navigation("PalgaarvestuseReads");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Puhkuseliik", b =>
                {
                    b.Navigation("Puhkus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Riik", b =>
                {
                    b.Navigation("Firmas");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tööajakava", b =>
                {
                    b.Navigation("PalgaarvestuseReads");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Tööleping", b =>
                {
                    b.Navigation("Tööajakavas");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Väljamakseliik", b =>
                {
                    b.Navigation("PalgaarvestuseReads");
                });
#pragma warning restore 612, 618
        }
    }
}
